# HTTP (Tomcat) port
server:
  port: ${PORT:8092}


# ----------------------------- 
# ---------
# Discovery Server Access
# ---------
#----------------------------- 
eureka:
   instance:
   
      # Default configuration : 
      #       eureka.instance.leaseRenewalIntervalInSeconds = 30 (in seconds)
      #       eureka.instance.leaseExpirationDurationInSeconds = 90 (in seconds)
      # Indicates how often (in seconds) the eureka client needs to send heartbeats to eureka server to indicate that it is still alive. 
      # If the heartbeats are not received for the period specified in leaseExpirationDurationInSeconds, 
      # eureka server will remove the instance from its view, there by disallowing traffic to this instance. 
      # Note that the instance could still not take traffic if it implements HealthCheckCallback and then decides to make itself unavailable.
      leaseRenewalIntervalInSeconds: 5
      leaseExpirationDurationInSeconds: 2
      
   client:
      
      # Discovery Server Access
      serviceUrl:
         defaultZone: ${DISCOVERY_URL:http://localhost:8061}/eureka/
         
      # eureka.client.healthcheck.enabled=true should only be set in application.yml. 
      # Setting the value in bootstrap.yml causes undesirable side effects, such as registering in Eureka with an UNKNOWN status.
      # By default, Eureka uses the client heartbeat to determine if a client is up. 
      # Unless specified otherwise, the Discovery Client does not propagate the current health check status of the application, 
      # per the Spring Boot Actuator. Consequently, after successful registration, Eureka always announces that the application 
      # is in 'UP' state. This behavior can be altered by enabling Eureka health checks, 
      # which results in propagating application status to Eureka. As a consequence, 
      # every other application does not send traffic to applications in states other then 'UP'.
      healthcheck:
         enabled: true    
         
         
# ----------------------------- 
# ---------
# Log configuration
# ---------
#-----------------------------              
logging:
  pattern: 
    console: "%d{yyyy-MM-dd HH:mm:ss} ${LOG_LEVEL_PATTERN:-%5p} %m%n"
    
   