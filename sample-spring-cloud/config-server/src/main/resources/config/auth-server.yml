# HTTP (Tomcat) port
server:
   port: ${PORT:8062}
      
# ===============================
# DATABASE
# ===============================
spring:
   datasource:
      # To make sure the H2 Web Console can access the database weâ€™ll have to append 
      # DB_CLOSE_DELAY=-1 and DB_CLOSE_ON_EXIT=FALSE to the spring.datasource.url property.
      # url: jdbc:h2:mem:oauth;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      url: jdbc:h2:mem:oauth;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MV_STORE=FALSE;MVCC=FALSE
      platform: h2
      username: sa
      password:
      driverClassName: org.h2.Driver
      # schema: classpath:/script/schema.sql
      # data: classpath:/script/data.sql
   jpa:
      database-platform: org.hibernate.dialect.H2Dialect
      hibernate:
         ddl-auto: update
      properties:
         hibernate:
            show_sql: false
            use_sql_comments: false
            format_sql: false
            
   # You can launch up H2 Console at http://localhost:8062/h2-console.     
   # Enabling H2 Console 
   h2:
      console:
         enabled: true # enable the console.
         path: /h2-console # path at which the console will be available.
         settings:
            trace: false # enable trace output.
            web-allow-others: false # enable remote access.
                   
# ----------------------------- 
# ---------
# Spring securiry configuration
# ---------
#----------------------------- 

security:
   oauth2:
      resource:
         id: my_resource_id

# ----------------------------- 
# ---------
# Discovery Server Access
# ---------
#----------------------------- 
eureka:
   instance:
   
      # Default configuration : 
      #       eureka.instance.leaseRenewalIntervalInSeconds = 30 (in seconds)
      #       eureka.instance.leaseExpirationDurationInSeconds = 90 (in seconds)
      # Indicates how often (in seconds) the eureka client needs to send heartbeats to eureka server to indicate that it is still alive. 
      # If the heartbeats are not received for the period specified in leaseExpirationDurationInSeconds, 
      # eureka server will remove the instance from its view, there by disallowing traffic to this instance. 
      # Note that the instance could still not take traffic if it implements HealthCheckCallback and then decides to make itself unavailable.
      leaseRenewalIntervalInSeconds: 5
      leaseExpirationDurationInSeconds: 2
      
   client:
      
      # Discovery Server Access
      serviceUrl:
         defaultZone: ${DISCOVERY_URL:http://localhost:8061}/eureka/
         
      # eureka.client.healthcheck.enabled=true should only be set in application.yml. 
      # Setting the value in bootstrap.yml causes undesirable side effects, such as registering in Eureka with an UNKNOWN status.
      # By default, Eureka uses the client heartbeat to determine if a client is up. 
      # Unless specified otherwise, the Discovery Client does not propagate the current health check status of the application, 
      # per the Spring Boot Actuator. Consequently, after successful registration, Eureka always announces that the application 
      # is in 'UP' state. This behavior can be altered by enabling Eureka health checks, 
      # which results in propagating application status to Eureka. As a consequence, 
      # every other application does not send traffic to applications in states other then 'UP'.
      healthcheck:
         enabled: true    
         

# ----------------------------- 
# ---------
# Log configuration
# ---------
#-----------------------------   
logging:
   level:
      org.springframework.security: DEBUG
      com.kali.services: DEBUG
   pattern:
      console: "%d{yyyy-MM-dd HH:mm:ss} [${LOG_LEVEL_PATTERN}]- %msg%n"
    
    